name: CI

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**/*.py'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - '.github/workflows/**'
      - 'tests/**'
      - 'infra/**'
      - 'docs/**'
  pull_request:
    branches: [ '**' ]
    paths:
      - '**/*.py'
      - 'pyproject.toml'
      - 'requirements*.txt'
      - '.github/workflows/**'
      - 'tests/**'
      - 'infra/**'
      - 'docs/**'
  workflow_dispatch:

# Prevent duplicate work on rapid pushes to the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  pull-requests: write  # Allow PR comments for coverage reports
  checks: write         # Allow check annotations

env:
  PYTHON_VERSION_MIN: '3.11'
  PYTHON_VERSION_MAX: '3.12'
  
jobs:
  # Pre-flight checks that run quickly
  pre-checks:
    name: Pre-flight Checks
    runs-on: ubuntu-latest
    outputs:
      python-versions: ${{ steps.python-versions.outputs.versions }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine Python versions
        id: python-versions
        run: |
          echo "versions=[\"${{ env.PYTHON_VERSION_MIN }}\", \"${{ env.PYTHON_VERSION_MAX }}\"]" >> $GITHUB_OUTPUT

      - name: Validate pyproject.toml
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_MIN }}
      
      - name: Check pyproject.toml syntax
        run: |
          python -c "import tomllib; tomllib.load(open('pyproject.toml', 'rb'))"

  # Security scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: pre-checks
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_MIN }}
          cache: pip

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit[toml]

      - name: Run safety check
        run: |
          pip install -e ".[dev]" || pip install -e .
          safety check --json --output safety-report.json || true
          
      - name: Run bandit security linter
        run: |
          bandit -r mhe/ cli/ ingestion/ -f json -o bandit-report.json || true
          bandit -r mhe/ cli/ ingestion/ -f txt

      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
          if-no-files-found: ignore

  # Main quality gates
  lint-type-test:
    name: Quality Gates (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: pre-checks
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.pre-checks.outputs.python-versions) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip
          cache-dependency-path: |
            pyproject.toml
            requirements*.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          # Try dev extras first, fallback to base install
          pip install -e ".[dev]" || pip install -e .

      - name: Show environment info
        run: |
          echo "::group::Python & Package Versions"
          python -V
          pip list | head -20
          echo "::endgroup::"

      - name: Cache ruff
        uses: actions/cache@v4
        with:
          path: ~/.cache/ruff
          key: ruff-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}

      - name: Ruff • Format Check
        run: |
          echo "::group::Format Check"
          ruff format --check --diff .
          echo "::endgroup::"

      - name: Ruff • Lint
        run: |
          echo "::group::Linting"
          ruff check --output-format=github .
          echo "::endgroup::"

      - name: Pyright • Type Check
        run: |
          echo "::group::Type Checking"
          pyright --outputjson | tee pyright-report.json
          # Also show human-readable output
          pyright
          echo "::endgroup::"

      - name: Pytest • Unit Tests
        run: |
          echo "::group::Running Tests"
          pytest \
            --verbose \
            --maxfail=3 \
            --tb=short \
            --durations=10 \
            --junitxml=pytest-junit-${{ matrix.python-version }}.xml \
            --cov=mhe --cov=cli --cov=ingestion \
            --cov-report=xml:coverage-${{ matrix.python-version }}.xml \
            --cov-report=term-missing \
            --cov-fail-under=80
          echo "::endgroup::"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            pytest-junit-${{ matrix.python-version }}.xml
            coverage-${{ matrix.python-version }}.xml
            pyright-report.json
          if-no-files-found: ignore

      - name: Comment coverage on PR
        if: github.event_name == 'pull_request' && matrix.python-version == env.PYTHON_VERSION_MIN
        uses: orgoro/coverage@v3.1
        with:
          coverageFile: coverage-${{ matrix.python-version }}.xml
          token: ${{ secrets.GITHUB_TOKEN }}

  # Integration tests (if they exist)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [pre-checks, lint-type-test]
    if: contains(github.event.head_commit.message, '[integration]') || contains(github.event.pull_request.title, '[integration]')
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: mhe_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_MIN }}
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip wheel
          pip install -e ".[dev]"

      - name: Run integration tests
        env:
          DB_URL: postgresql://postgres:testpass@localhost:5432/mhe_test
        run: |
          pytest tests/ -m "integration" \
            --verbose \
            --maxfail=1 \
            --junitxml=pytest-integration.xml

      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: pytest-integration.xml
          if-no-files-found: ignore

  # Documentation build
  docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: lint-type-test
    if: >-
      contains(github.event.head_commit.message, '[docs]') ||
      contains(github.event.pull_request.title, '[docs]') ||
      github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for git info in docs

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_MIN }}
          cache: pip

      - name: Install docs dependencies
        run: |
          python -m pip install --upgrade pip wheel
          # Try installing doc extras if they exist
          pip install -e ".[docs]" || pip install -e .
          # Fallback to common doc tools
          pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin || true

      - name: Build documentation
        run: |
          if [ -f "mkdocs.yml" ]; then
            mkdocs build --strict --verbose
          else
            echo "No mkdocs.yml found, skipping docs build"
            mkdir -p site
            echo "<h1>Documentation not configured</h1>" > site/index.html
          fi

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: site/
          if-no-files-found: ignore

      - name: Deploy to GitHub Pages (main branch only)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site

  # Build distribution packages
  build-dist:
    name: Build Distribution
    runs-on: ubuntu-latest
    needs: lint-type-test
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for setuptools-scm

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION_MIN }}
          cache: pip

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip build twine check-manifest

      - name: Check manifest
        run: check-manifest

      - name: Build source distribution and wheel
        run: |
          python -m build --sdist --wheel --outdir dist/
          ls -la dist/

      - name: Verify distribution
        run: |
          twine check dist/*
          
      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

  # Test installation from built packages
  test-install:
    name: Test Package Installation
    runs-on: ubuntu-latest
    needs: build-dist
    if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Download distribution artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/

      - name: Test wheel installation
        run: |
          pip install dist/*.whl
          python -c "import mhe; print('Wheel install successful')"
          python -m cli.mhe_cli --help

      - name: Test source installation (fresh environment)
        run: |
          pip uninstall -y mhe
          pip install dist/*.tar.gz
          python -c "import mhe; print('Source install successful')"

  # Summary job for required status checks
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [security, lint-type-test, docs]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.security.result }}" == "failure" || \
                "${{ needs.lint-type-test.result }}" == "failure" || \
                "${{ needs.docs.result }}" == "failure" ]]; then
            echo "One or more required jobs failed"
            exit 1
          else
            echo "All required jobs passed or were skipped"
          fi